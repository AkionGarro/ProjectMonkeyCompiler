# Generated from C:/Users/bryam/Desktop/ProjectMonkeyCompiler/Compiler\MonkeyGrammar.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,12,1,12,1,13,5,13,119,8,13,10,13,12,13,122,
        9,13,1,14,5,14,125,8,14,10,14,12,14,128,9,14,1,15,5,15,131,8,15,
        10,15,12,15,134,9,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,3,32,193,8,32,1,33,
        4,33,196,8,33,11,33,12,33,197,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
        1,39,1,39,1,39,1,39,1,39,0,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,
        0,5,3,0,65,90,95,95,97,122,1,0,48,57,3,0,48,57,65,90,97,122,5,0,
        100,102,105,105,110,110,114,114,116,116,3,0,9,10,13,13,32,32,228,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,
        1,0,0,0,3,85,1,0,0,0,5,92,1,0,0,0,7,94,1,0,0,0,9,96,1,0,0,0,11,99,
        1,0,0,0,13,102,1,0,0,0,15,105,1,0,0,0,17,107,1,0,0,0,19,109,1,0,
        0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,1,0,0,0,27,120,1,0,0,0,
        29,126,1,0,0,0,31,132,1,0,0,0,33,135,1,0,0,0,35,137,1,0,0,0,37,140,
        1,0,0,0,39,142,1,0,0,0,41,144,1,0,0,0,43,146,1,0,0,0,45,148,1,0,
        0,0,47,150,1,0,0,0,49,153,1,0,0,0,51,156,1,0,0,0,53,159,1,0,0,0,
        55,165,1,0,0,0,57,169,1,0,0,0,59,175,1,0,0,0,61,180,1,0,0,0,63,185,
        1,0,0,0,65,192,1,0,0,0,67,195,1,0,0,0,69,201,1,0,0,0,71,203,1,0,
        0,0,73,205,1,0,0,0,75,210,1,0,0,0,77,216,1,0,0,0,79,219,1,0,0,0,
        81,82,5,108,0,0,82,83,5,101,0,0,83,84,5,116,0,0,84,2,1,0,0,0,85,
        86,5,114,0,0,86,87,5,101,0,0,87,88,5,116,0,0,88,89,5,117,0,0,89,
        90,5,114,0,0,90,91,5,110,0,0,91,4,1,0,0,0,92,93,5,62,0,0,93,6,1,
        0,0,0,94,95,5,60,0,0,95,8,1,0,0,0,96,97,5,62,0,0,97,98,5,61,0,0,
        98,10,1,0,0,0,99,100,5,60,0,0,100,101,5,61,0,0,101,12,1,0,0,0,102,
        103,5,61,0,0,103,104,5,61,0,0,104,14,1,0,0,0,105,106,5,91,0,0,106,
        16,1,0,0,0,107,108,5,93,0,0,108,18,1,0,0,0,109,110,5,123,0,0,110,
        20,1,0,0,0,111,112,5,125,0,0,112,22,1,0,0,0,113,114,5,40,0,0,114,
        24,1,0,0,0,115,116,5,41,0,0,116,26,1,0,0,0,117,119,7,0,0,0,118,117,
        1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,28,1,
        0,0,0,122,120,1,0,0,0,123,125,7,1,0,0,124,123,1,0,0,0,125,128,1,
        0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,30,1,0,0,0,128,126,1,0,
        0,0,129,131,7,2,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,
        0,0,132,133,1,0,0,0,133,32,1,0,0,0,134,132,1,0,0,0,135,136,5,34,
        0,0,136,34,1,0,0,0,137,138,5,33,0,0,138,139,5,61,0,0,139,36,1,0,
        0,0,140,141,5,43,0,0,141,38,1,0,0,0,142,143,5,45,0,0,143,40,1,0,
        0,0,144,145,5,42,0,0,145,42,1,0,0,0,146,147,5,47,0,0,147,44,1,0,
        0,0,148,149,5,37,0,0,149,46,1,0,0,0,150,151,5,47,0,0,151,152,5,47,
        0,0,152,48,1,0,0,0,153,154,5,47,0,0,154,155,5,42,0,0,155,50,1,0,
        0,0,156,157,5,42,0,0,157,158,5,47,0,0,158,52,1,0,0,0,159,160,3,49,
        24,0,160,161,7,3,0,0,161,162,3,51,25,0,162,163,1,0,0,0,163,164,6,
        26,0,0,164,54,1,0,0,0,165,166,5,108,0,0,166,167,5,101,0,0,167,168,
        5,110,0,0,168,56,1,0,0,0,169,170,5,102,0,0,170,171,5,105,0,0,171,
        172,5,114,0,0,172,173,5,115,0,0,173,174,5,116,0,0,174,58,1,0,0,0,
        175,176,5,108,0,0,176,177,5,97,0,0,177,178,5,115,0,0,178,179,5,116,
        0,0,179,60,1,0,0,0,180,181,5,114,0,0,181,182,5,101,0,0,182,183,5,
        115,0,0,183,184,5,116,0,0,184,62,1,0,0,0,185,186,5,112,0,0,186,187,
        5,117,0,0,187,188,5,115,0,0,188,189,5,104,0,0,189,64,1,0,0,0,190,
        193,3,73,36,0,191,193,3,75,37,0,192,190,1,0,0,0,192,191,1,0,0,0,
        193,66,1,0,0,0,194,196,7,4,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,
        195,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,200,6,33,0,0,200,
        68,1,0,0,0,201,202,5,44,0,0,202,70,1,0,0,0,203,204,5,59,0,0,204,
        72,1,0,0,0,205,206,5,116,0,0,206,207,5,114,0,0,207,208,5,117,0,0,
        208,209,5,101,0,0,209,74,1,0,0,0,210,211,5,102,0,0,211,212,5,97,
        0,0,212,213,5,108,0,0,213,214,5,115,0,0,214,215,5,101,0,0,215,76,
        1,0,0,0,216,217,5,105,0,0,217,218,5,102,0,0,218,78,1,0,0,0,219,220,
        5,101,0,0,220,221,5,108,0,0,221,222,5,115,0,0,222,223,5,101,0,0,
        223,80,1,0,0,0,6,0,120,126,132,192,197,1,6,0,0
    ]

class MonkeyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LET = 1
    RETURN = 2
    GreaterT = 3
    LowerT = 4
    GreaterEQ = 5
    LowerEQ = 6
    Equeals = 7
    BLOCK_OPEN = 8
    BLOCK_CLOSE = 9
    BRACKET_OPEN = 10
    BRACKET_CLOSE = 11
    PAR_OPEN = 12
    PAR_CLOSE = 13
    LETTER = 14
    DIGIT = 15
    CHARIN = 16
    QUOTE = 17
    NotEqueals = 18
    Sum = 19
    Res = 20
    Mul = 21
    Div = 22
    Mod = 23
    DivEnt = 24
    Open = 25
    Close = 26
    Comment = 27
    Len = 28
    First = 29
    Last = 30
    Rest = 31
    Push = 32
    Boolean = 33
    WS = 34
    COMMA = 35
    SEMICOLON = 36
    TRUE = 37
    FALSE = 38
    IF = 39
    ELSE = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'let'", "'return'", "'>'", "'<'", "'>='", "'<='", "'=='", "'['", 
            "']'", "'{'", "'}'", "'('", "')'", "'\"'", "'!='", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'//'", "'/*'", "'*/'", "'len'", "'first'", 
            "'last'", "'rest'", "'push'", "','", "';'", "'true'", "'false'", 
            "'if'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "LET", "RETURN", "GreaterT", "LowerT", "GreaterEQ", "LowerEQ", 
            "Equeals", "BLOCK_OPEN", "BLOCK_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
            "PAR_OPEN", "PAR_CLOSE", "LETTER", "DIGIT", "CHARIN", "QUOTE", 
            "NotEqueals", "Sum", "Res", "Mul", "Div", "Mod", "DivEnt", "Open", 
            "Close", "Comment", "Len", "First", "Last", "Rest", "Push", 
            "Boolean", "WS", "COMMA", "SEMICOLON", "TRUE", "FALSE", "IF", 
            "ELSE" ]

    ruleNames = [ "LET", "RETURN", "GreaterT", "LowerT", "GreaterEQ", "LowerEQ", 
                  "Equeals", "BLOCK_OPEN", "BLOCK_CLOSE", "BRACKET_OPEN", 
                  "BRACKET_CLOSE", "PAR_OPEN", "PAR_CLOSE", "LETTER", "DIGIT", 
                  "CHARIN", "QUOTE", "NotEqueals", "Sum", "Res", "Mul", 
                  "Div", "Mod", "DivEnt", "Open", "Close", "Comment", "Len", 
                  "First", "Last", "Rest", "Push", "Boolean", "WS", "COMMA", 
                  "SEMICOLON", "TRUE", "FALSE", "IF", "ELSE" ]

    grammarFileName = "MonkeyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


